type Post {
    id: ID!
    author: String!
    title: String!
    content: String!
    createdAt: String!
    allowComments: Boolean!
    comments(first: Int, after: String): CommentConnection! # Позволяет получить комментарии к посту с пагинацией.
  }

  type PostConnection{
    edges: [PostEdge!]!
    pageInfo: PageInfo!
  }

  type PostEdge{
    node: Post!
    cursor: String!
  }

  type PageInfo{
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
  }

  type Comment {
    id: ID!
    author: String!
    content: String!
    createdAt: String!
    postId: ID!
    post: Post! # Пост, к которому относится комментарий.
    parentId: ID # ID родительского комментария (для ответов на комментарии). Может быть null, если комментарий корневой.
    replies(first: Int, after: String): CommentConnection! # Позволяет получить ответы на комментарий с пагинацией.
  }

  type CommentConnection {
    edges: [CommentEdge!]!
    pageInfo: PageInfo!
  }

  type CommentEdge {
    cursor: String!
    node: Comment!
  }

  type Query {
    post(id: ID!): Post # Запрос для получения одного поста по его ID.
    posts(first: Int, after: String): PostConnection! # Запрос для получения списка постов с пагинацией.
    comment(id: ID!): Comment # Запрос для получения одного комментария по его ID.
  }

  type Mutation{
    createPost(input: CreatePostInput!): Post! # Мутация для создания нового поста.
    createComment(input: CreateCommentInput!): Comment! # Мутация для создания нового комментария.
  }

  input CreatePostInput{
    author: String!
    title: String!
    content: String!
    allowComments: Boolean!
  }

  input CreateCommentInput{
    postId: ID! # ID поста, к которому относится комментарий.
    author: String!
    content: String!
    parentId: ID # ID родительского комментария, если это ответ. Может быть null для корневых комментариев.
  }