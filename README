# Примеры запросов GraphQL

## 1. Запрос на получение списка постов (posts query)

Этот запрос получает список постов, используя пагинацию (запрашивая первые 2 поста).

### GraphQL

```graphql
query GetPosts {
  posts(first: 2) {
    edges {
      cursor
      node {
        id
        title
        author
        content
        createdAt
        allowComments
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}
```

### Описание запроса

- `query GetPosts`: Определяет GraphQL запрос с именем GetPosts.
- `posts(first: 2)`: Запрашивает поле posts (список постов) и указывает, что нужно вернуть первые 2 поста (first: 2). Вы можете изменить значение first, чтобы получить другое количество постов.
- `edges`: Запрашивает список "ребер" (edges) в соединении постов. Edges содержат курсор для пагинации и узел (node).
- `node`: Внутри каждого "ребра" запрашивает поле node, которое представляет собой сам объект поста.
- `id, title, author, content, createdAt, allowComments`: Запрашивает поля каждого поста: ID, заголовок, автор, содержание, дату создания и разрешение на комментарии.
- `pageInfo`: Запрашивает информацию о пагинации, в данном случае, hasNextPage (есть ли следующая страница).

### Ожидаемый ответ

Вы должны получить JSON ответ, содержащий список постов (первые 2, если они есть в in-memory хранилище) с запрошенными полями и информацию о пагинации. Пример ответа (может отличаться в зависимости от данных в вашем хранилище):

```json
{
  "data": {
    "posts": {
      "edges": [
        {
          "cursor": "post-id-1",
          "node": {
            "id": "post-id-1",
            "title": "Первый пост",
            "author": "Автор 1",
            "content": "Содержание первого поста",
            "createdAt": "2024-01-01T12:00:00Z",
            "allowComments": true
          }
        },
        {
          "cursor": "post-id-2",
          "node": {
            "id": "post-id-2",
            "title": "Второй пост",
            "author": "Автор 2",
            "content": "Содержание второго поста",
            "createdAt": "2024-01-02T10:00:00Z",
            "allowComments": false
          }
        }
      ],
      "pageInfo": {
        "hasNextPage": true
      }
    }
  }
}
```

## 2. Запрос на получение конкретного поста по ID (post query)

Замените "your-post-id" на ID существующего поста.

### GraphQL

```graphql
query GetPostByID {
  post(id: "your-post-id") {
    id
    title
    author
    content
    createdAt
    allowComments
    comments {
      edges {
        node {
          id
          author
          content
          createdAt
        }
      }
    }
  }
}
```

### Описание запроса

- `query GetPostByID`: Определяет GraphQL запрос с именем GetPostByID.
- `post(id: "your-post-id")`: Запрашивает поле post (получение поста по ID) и передает ID поста "your-post-id" в качестве аргумента. Важно: замените "your-post-id" на реальный ID поста, который существует в вашем in-memory хранилище.
- `id, title, author, content, createdAt, allowComments`: Запрашивает поля поста.
- `comments`: Внутри объекта поста также запрашивает поле comments (список комментариев к этому посту).
- Внутри comments, аналогично запросу posts, запрашивает edges и node для получения информации о комментариях и их полях (id, author, content, createdAt).

### Ожидаемый ответ

Вы должны получить JSON ответ с информацией о посте с указанным ID и списком его комментариев (если они есть). Пример ответа (может отличаться):

```json
{
  "data": {
    "post": {
      "id": "your-post-id",
      "title": "Первый пост",
      "author": "Автор 1",
      "content": "Содержание первого поста",
      "createdAt": "2024-01-01T12:00:00Z",
      "allowComments": true,
      "comments": {
        "edges": [
          {
            "node": {
              "id": "comment-id-1",
              "author": "Комментатор 1",
              "content": "Отличный первый пост!",
              "createdAt": "2023-12-31T14:00:00Z"
            }
          },
          {
            "node": {
              "id": "comment-id-2",
              "author": "Комментатор 2",
              "content": "Согласен, очень интересно!",
              "createdAt": "2023-12-31T15:00:00Z"
            }
          }
        ]
      }
    }
  }
}
```

## 3. Запрос на создание нового поста (createPost mutation)

### GraphQL

```graphql
mutation CreateNewPost {
  createPost(input: {
    title: "Новый тестовый пост"
    author: "Тестировщик"
    content: "Содержание нового поста для тестирования"
    allowComments: true
  }) {
    id
    title
    author
    content
    createdAt
    allowComments
  }
}
```

### Описание запроса

- `mutation CreateNewPost`: Определяет GraphQL мутацию с именем CreateNewPost.
- `createPost(input: { ... })`: Вызывает мутацию createPost и передает входные данные в аргументе input.
- `input: { ... }`: Определяет входной объект input для мутации createPost, содержащий поля:
  - `title: "Новый тестовый пост"`
  - `author: "Тестировщик"`
  - `content: "Содержание нового поста для тестирования"`
  - `allowComments: true`
- `{ id, title, author, content, createdAt, allowComments }`: Запрашивает поля созданного поста, которые нужно вернуть в ответе мутации.

### Ожидаемый ответ

Вы должны получить JSON ответ с информацией о созданном посте, включая его автоматически сгенерированный id. Пример ответа (ID будет отличаться):

```json
{
  "data": {
    "createPost": {
      "id": "new-post-id-generated-by-uuid",
      "title": "Новый тестовый пост",
      "author": "Тестировщик",
      "content": "Содержание нового поста для тестирования",
      "createdAt": "Текущая дата и время в формате RFC3339",
      "allowComments": true
    }
  }
}
```

## 4. Запрос на получение комментариев к посту (comments query в поле post)

Этот запрос аналогичен части запроса GetPostByID, где мы запрашивали комментарии.

### GraphQL

```graphql
query GetPostComments {
  post(id: "your-post-id") { # Замените "your-post-id" на ID поста, к которому хотите получить комментарии
    id
    title
    comments(first: 2) { # Запрашиваем первые 2 комментария
      edges {
        cursor
        node {
          id
          author
          content
          createdAt
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
```

### Описание запроса

Аналогичен запросу GetPostByID в части запроса post и comments, но в данном случае мы запрашиваем только поля id, title поста и поле comments с пагинацией (первые 2 комментария). Не забудьте заменить "your-post-id" на ID поста, к которому вы хотите получить комментарии.

### Ожидаемый ответ

JSON ответ с информацией о посте и списком комментариев к нему (первые 2 комментария, если они есть). Пример ответа (может отличаться):

```json
{
  "data": {
    "post": {
      "id": "your-post-id",
      "title": "Первый пост",
      "comments": {
        "edges": [
          {
            "cursor": "comment-id-1",
            "node": {
              "id": "comment-id-1",
              "author": "Комментатор 1",
              "content": "Отличный первый пост!",
              "createdAt": "2023-12-31T14:00:00Z"
            }
          },
          {
            "cursor": "comment-id-2",
            "node": {
              "id": "comment-id-2",
              "author": "Комментатор 2",
              "content": "Согласен, очень интересно!",
              "createdAt": "2023-12-31T15:00:00Z"
            }
          }
        ],
        "pageInfo": {
          "hasNextPage": true
        }
      }
    }
  }
}
```

## 5. Запрос на создание нового комментария (createComment mutation)

Замените "your-post-id" на ID поста, к которому вы хотите добавить комментарий.

### GraphQL

```graphql
mutation CreateNewComment {
  createComment(input: {
    postId: "your-post-id" # Замените "your-post-id" на ID поста, к которому добавляете комментарий
    author: "Новый комментатор"
    content: "Текст нового комментария"
  }) {
    id
    author
    content
    createdAt
    postId
  }
}
```

### Описание запроса

- `mutation CreateNewComment`: Определяет GraphQL мутацию с именем CreateNewComment.
- `createComment(input: { ... })`: Вызывает мутацию createComment с входными данными в input.
- `input: { ... }`: Определяет входной объект input для мутации createComment, содержащий поля:
  - `postID: "your-post-id"`: ID поста, к которому добавляется комментарий. Важно: замените "your-post-id" на реальный ID существующего поста.
  - `author: "Новый комментатор"`
  - `content: "Текст нового комментария"`
- `{ id, author, content, createdAt, postID }`: Запрашивает поля созданного комментария, которые нужно вернуть в ответе мутации.

### Ожидаемый ответ

Вы должны получить JSON ответ с информацией о созданном комментарии, включая его ID и ID поста, к которому он был добавлен. Пример ответа (ID будут отличаться):

```json
{
  "data": {
    "createComment": {
      "id": "new-comment-id-generated-by-uuid",
      "author": "Новый комментатор",
      "content": "Текст нового комментария",
      "createdAt": "Текущая дата и время в формате RFC3339",
      "postID": "your-post-id"
    }
  }
}